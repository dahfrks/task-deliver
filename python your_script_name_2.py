import streamlit as st
import pandas as pd
import requests
import json

# --- C·∫§U H√åNH ---
# Thay th·∫ø b·∫±ng Bot Token v√† Channel ID c·ªßa b·∫°n
token = "OTk1MjI3NzY3MTc4MjcyODc5.GBnFqf.igeJl8idY5jn0sSXRGMzWCyfD9BTYbaAu5K2AQ"  # D√ÅN TOKEN C·ª¶A B·∫†N V√ÄO ƒê√ÇY
CHANNEL_ID = "1429570178017923183" # D√ÅN CHANNEL ID B·∫†N MU·ªêN G·ª¨I TIN NH·∫ÆN
TASK_FILE = "tasks.xlsx"
# --- K·∫æT TH√öC C·∫§U H√åNH ---

def send_discord_message(message):
    """H√†m g·ª≠i tin nh·∫Øn t·ªõi k√™nh Discord b·∫±ng Token."""
    url = "https://discord.com/api/v9/science"
    
    # Header cho user token (KH√îNG c√≥ "Bot ")
    headers = {
        "Authorization": token,
        "Content-Type": "application/json"
    }
    
    payload = json.dumps({
        "content": message
    })
    
    try:
        response = requests.post(url, headers=headers, data=payload)
        response.raise_for_status()  # B√°o l·ªói n·∫øu m√£ tr·∫°ng th√°i kh√¥ng ph·∫£i 2xx
        return True, "G·ª≠i th√†nh c√¥ng!"
    except requests.exceptions.RequestException as e:
        print(f"L·ªói khi g·ª≠i: {e}")
        return False, str(e)

# --- Giao di·ªán Web App ---

st.set_page_config(layout="wide", page_title="Annotation Task Review")

st.title("üìù C√¥ng C·ª• Review Task cho Annotator")

# T·∫£i danh s√°ch task t·ª´ file Excel
try:
    df = pd.read_excel(TASK_FILE)
except FileNotFoundError:
    st.error(f"Kh√¥ng t√¨m th·∫•y file `{TASK_FILE}`. Vui l√≤ng t·∫°o file v√† ƒë·∫∑t c√πng th∆∞ m·ª•c v·ªõi app.py.")
    st.stop()

# S·ª≠ d·ª•ng session_state ƒë·ªÉ l∆∞u v·ªã tr√≠ task hi·ªán t·∫°i
if 'current_task_index' not in st.session_state:
    st.session_state.current_task_index = 0

# H√†m ƒë·ªÉ chuy·ªÉn sang task ti·∫øp theo
def next_task():
    if st.session_state.current_task_index < len(df) - 1:
        st.session_state.current_task_index += 1
    else:
        st.session_state.current_task_index = 0 # Quay l·∫°i t·ª´ ƒë·∫ßu n·∫øu h·∫øt task

# L·∫•y task hi·ªán t·∫°i
index = st.session_state.current_task_index
if index < len(df):
    current_task = df.loc[index, 'task_content']

    st.header(f"Task #{index + 1}/{len(df)}")
    st.info("H√£y xem v√† th·ª±c h√†nh v·ªõi n·ªôi dung task d∆∞·ªõi ƒë√¢y.")
    
    # Hi·ªÉn th·ªã ph·∫ßn "practice" (n·ªôi dung task)
    st.code(current_task, language='text')
    
    st.markdown("---")
    
    col1, col2 = st.columns(2)

    with col1:
        st.subheader("‚úÖ Task ƒë√£ t·ªët")
        if st.button("G·ª≠i Task G·ªëc v√†o Discord", key="good_task"):
            success, message = send_discord_message(current_task)
            if success:
                st.success(f"ƒê√£ g·ª≠i th√†nh c√¥ng task #{index + 1} v√†o Discord.")
                next_task()
                st.rerun() # T·∫£i l·∫°i trang ƒë·ªÉ hi·ªÉn th·ªã task m·ªõi
            else:
                st.error(f"G·ª≠i th·∫•t b·∫°i: {message}")

    with col2:
        st.subheader("‚ùå Task c·∫ßn s·ª≠a")
        edited_task = st.text_area("S·ª≠a l·∫°i n·ªôi dung task t·∫°i ƒë√¢y:", value=current_task, height=1000)
        if st.button("G·ª≠i Task ƒê√£ S·ª≠a v√†o Discord", key="bad_task"):
            success, message = send_discord_message(edited_task)
            if success:
                st.success(f"ƒê√£ g·ª≠i th√†nh c√¥ng task #{index + 1} (ƒë√£ s·ª≠a) v√†o Discord.")
                # Ghi ch√∫: B·∫°n c√≥ th·ªÉ th√™m logic ƒë·ªÉ l∆∞u l·∫°i task ƒë√£ s·ª≠a v√†o file Excel
                next_task()
                st.rerun()
            else:
                st.error(f"G·ª≠i th·∫•t b·∫°i: {message}")
else:

    st.warning("ƒê√£ h·∫øt task trong file Excel!")
